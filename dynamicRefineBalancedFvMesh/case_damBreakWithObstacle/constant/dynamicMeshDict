/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5.0                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      dynamicMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

//example for the tutorial damBreakWithObstacle (interDyMFoam)

IntRefFld_DICT
{
    // How often to refine
    refineInterval  1;

    // Field to be refinement on
    field           internalRefinementField;

    // If value < unrefineLevel unrefine
    // unrefineLevel must be <= lowerRefineLevel 
    unrefineLevel   0;//don't edit this value

    // If value < unrefineLevel unrefine
    // unrefineLevel must be <= lowerRefineLevel
    lowerRefineLevel 1;//don't edit this value
    upperRefineLevel 2;//don't edit this value

    // Have slower than 2:1 refinement
    nBufferLayers   1;

    // Refine cells only up to maxRefinement levels
    maxRefinement   3; // >= max(regions[i].minLevel)
}

FIELD1_DICT
{
    // How often to refine
    refineInterval  1;

    // Field to be refinement on
    field           alpha.water;

    // If value < unrefineLevel unrefine
    // unrefineLevel must be <= lowerRefineLevel
    unrefineLevel    1e100; //????

    // Refine field inbetween lower..upper
    lowerRefineLevel 0.001;
    upperRefineLevel 0.999;

    // Have slower than 2:1 refinement
    nBufferLayers   1;

    // Refine cells only up to maxRefinement levels
    maxRefinement   2;
}

FIELD2_DICT
{
    $FIELD1_DICT;
    field           p_rgh;
    lowerRefineLevel 3e3;
    upperRefineLevel 5e3;
    maxRefinement   1;
}

ADDITIONAL_ENTRIES
{
    // Stop refinement if maxCells reached
    // The total number of cells will be higher than the number given in maxCells,
    // as the refinement will stop AFTER maxCells is surpassed.
    maxCells        200000;

    // Flux field and corresponding velocity field. Fluxes on changed
    // faces get recalculated by interpolating the velocity. Use 'none'
    // on surfaceScalarFields that do not need to be reinterpolated.
    correctFluxes
    (
        (phi                none)
        (nHatf              none)
        (rhoPhi             none)
        (alphaPhi10         none)
        (alphaPhi0.water    none)
        (ghf                none)
    );

    // Write the refinement level as a volScalarField
    dumpLevel       true;
}

BALANCING_ENTRIES
{
    // Enable dynamic load balancing (parallel jobs)
    enableBalancing true;

    // Maximal alowable load imbalance among processes (parallel jobs)
    allowableImbalance 0.1;
}

REF_CONTROLS
{
    // Additional refinement criteria that may be useful anytime
    enableRefinementControl  true;

    regions
    (
        boxToCell
        {
            minLevel 2;
            box (-1 -1 -1)(0.4 0.1 0.4);
        }

        boxToCell
        {
            minLevel 1;
            box (0.21 -1.01 0.31)(1.01 0.11 0.61);
        }
    );
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

//dynamicFvMesh   staticFvMesh;
//dynamicFvMesh   dynamicRefineFvMesh;
//dynamicFvMesh   dynamicRefineBalancedFvMesh;
  dynamicFvMesh   dynamicMultiFieldRefineFvMesh;
//dynamicFvMesh   dynamicMultiFieldRefineBalancedFvMesh;

/*dynamicRefineFvMeshCoeffs
{
    $IntRefFld_DICT;
    $ADDITIONAL_ENTRIES;
    $BALANCING_ENTRIES;
}*/

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dynamicMultiFieldRefineFvMeshCoeffs
{
    // NOTE: fields shall be in descending order of "maxRefinement"
    fields
    (
        {$FIELD1_DICT;}
        //{$FIELD2_DICT;}
        {$IntRefFld_DICT;}
    );
    $ADDITIONAL_ENTRIES;
    $BALANCING_ENTRIES;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

refinementControls
{
    $REF_CONTROLS;
}


// ************************************************************************* //
